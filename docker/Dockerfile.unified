FROM  ubuntu:22.04 as base
ARG DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC

## Installation of the neuralangelo and colmap dependencies: 
# colmap dependencies
RUN apt-get update && apt-get install -y \
    git \
    tzdata \
    cmake \
    ninja-build \
    build-essential \
    libboost-program-options-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-system-dev \
    libboost-test-dev \
    libeigen3-dev \
    libflann-dev \
    libfreeimage-dev \
    libmetis-dev \
    libgoogle-glog-dev \
    libgflags-dev \
    libsqlite3-dev \
    libglew-dev \
    qtbase5-dev \
    libqt5opengl5-dev \
    libcgal-dev \
    libceres-dev \
    build-essential \
    bzip2 \
    ca-certificates \
    cmake \
    curl \
    ffmpeg \
    g++ \
    git \
    libx264-dev \
    tmux \
    wget \
    python3-pip \
    python3 
    
RUN pip install --upgrade pip 

## setting up the installation of the conda 
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh && bash miniconda.sh -b -p /opt/conda
ENV CONDA_DIR=/opt/conda
ENV PATH=$CONDA_DIR/bin:$PATH

WORKDIR /app/neuralangelo
ENV CUDA_ARCHITECTURES=70,72,75,80,86

## setting up colmap and overall repository
RUN git clone --recursive https://github.com/The-Extra-Project/neuralangelo.git && \
cd ./neuralangelo && \
git checkout -b Dhruv/resolve-docker-build && \
cd ./third_party/colmap && \
mkdir build && \
cd build && \
cmake ../ -GNinja -DCMAKE_CUDA_ARCHITECTURES=all && \
ninja && \
ninja install 

# Add Docker's official GPG key:
RUN  apt-get update  && \
 apt-get install -y  ca-certificates curl gnupg && \
 install -m 0755 -d /etc/apt/keyrings && \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg |  gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
 chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
##  now running the image preprocessing step from the colmap container 

## installing docker (in docker runtime ;) ) from the commands on the docs.docker.com
## this needs to 

WORKDIR /
## again installing cmake because of the issues regarding the tiny-cuda-nn installation 
##(and ubuntu apt installation is not of latest version)

RUN wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-Linux-x86_64.sh -q -O /tmp/cmake-install.sh \
&& chmod u+x /tmp/cmake-install.sh \
      && mkdir /opt/cmake-3.24.1 \
      && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.24.1 \
    && rm /tmp/cmake-install.sh \
      && ln -s /opt/cmake-3.24.1/bin/* /usr/local/bin


## also the cuda-12.2 which is the dependency of the tiny-cuda-nn 

# RUN curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey -o /tmp/nvidia-gpgkey && \
# gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg /tmp/nvidia-gpgkey && \
# curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list && \
# echo "downloading the nvidia container toollist file"  && \
# curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list && \
# sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' /tmp/nvidia-list > /etc/apt/sources.list.d/nvidia-container-toolkit.list && \
# apt-get update && \
FROM nvidia/cuda:12.2.2-devel-ubuntu22.04 as build_cuda
## installing the tiny-cuda-nn which is not being setup by the conda env. 
COPY --from=base / / 
ARG TCNN_CUDA_ARCHITECTURES=90;89;86;80;75;70;61;52
RUN apt-get update && apt-get install -y git python3-pip 

WORKDIR /app/neuralangelo/neuralangelo
RUN pip3 install torch torchvision torchaudio -f https://download.pytorch.org/whl/cu111/torch_stable.html



RUN pip install  -r requirements.txt


COPY ../projects .

ENTRYPOINT ["./projects/neuralangelo/scripts/image_reconstruction.sh"]
